{ Just enough to make the OpenPictureDialog work with M3I + M3C }

unit M3Iregister;

interface

uses
  Winapi.Windows,
  System.SysUtils,
  Vcl.Graphics,
  System.Classes,
  TypeDefinitions,
  Vcl.ExtCtrls,
  Winapi.Messages,
  Vcl.Dialogs,
  Vcl.StdCtrls,
  Vcl.Controls;

type
  TOpenPictureDialogM3D = class(TOpenDialog)
  private
    FPicturePanel: TPanel;
    FPictureLabel: TLabel;
    FPaintPanel: TPanel;
    FImageCtrl: TImage;
    FSavedFilename: string;
    function IsFilterStored: Boolean;
  protected
    procedure DoClose; override;
    procedure DoSelectionChange; override;
    procedure DoShow; override;
    property ImageCtrl: TImage read FImageCtrl;
    property PictureLabel: TLabel read FPictureLabel;
  published
    property Filter stored IsFilterStored;
  public
    OrigFileSize: TPoint;
    constructor Create(AOwner: TComponent); override;
    function Execute(ParentWnd: HWND): Boolean; override;
  end;

  TM3IGraphic = Class(TBitmap)  //TGraphic.. image width <> bitmap width
  private
  protected
  public
    procedure LoadFromStream(Stream: TStream); override;
    procedure LoadFromFile(const Filename: String); override;
    procedure GetOriginalSize(const Filename: String; var ISize: TPoint);
  end;
  TM3CGraphic = Class(TBitmap)
  private
  protected
  public
    procedure LoadFromStream(Stream: TStream); override;
    procedure LoadFromFile(const Filename: String); override;
    procedure GetOriginalSize(const Filename: String; var ISize: TPoint);
  end;
var
  NoPreviewBMP: TBitMap;

implementation

uses
  FileHandling,
  Math3D,
  DivUtils;

{procedure Register;
begin
    RegisterComponents('Custom'' Dialogs', [TOpenPictureDialogM3D]);
end;  }

type
    TSilentPaintPanel = class(TPanel)
    protected
        procedure WMPaint(var Msg: TWMPaint); message WM_PAINT;
    end;

procedure TSilentPaintPanel.WMPaint(var Msg: TWMPaint);
begin
    try
      inherited;
    except
      Caption := '';//'No preview';
    end;
end;

{ TOpenPictureDialogM3D }
// display preview of M3I files
//{$R ExtDlgsM3D.res}
//{$R *.res} declared in M3D.dpr
constructor TOpenPictureDialogM3D.Create(AOwner: TComponent);
begin
    inherited Create(AOwner);
    Filter := GraphicFilter(TGraphic);
    FPicturePanel := TPanel.Create(Self);
    with FPicturePanel do
    begin
      Name := 'PicturePanel';
      Caption := '';
      SetBounds(0, 0, 400, 400); //204, 5, 169, 200
      BevelOuter := bvNone;
      BorderWidth := 0;
      TabOrder := 1;
      FPictureLabel := TLabel.Create(Self);
      with FPictureLabel do
      begin
        Name := 'PictureLabel';
        Caption := '';
        SetBounds(0, 0, 400, 24); // 6, 6, 157, 23
        Align := alTop;
        AutoSize := False;
        Parent := FPicturePanel;
      end;
      FPaintPanel := TSilentPaintPanel.Create(Self);
      with FPaintPanel do
      begin
        Name := 'PaintPanel';
        Caption := '';
        SetBounds(0, 0, 400, 400);// 157, 145
        Align := alClient;
        BevelInner := bvRaised;
        BevelOuter := bvLowered;
        TabOrder := 0;
        FImageCtrl := TImage.Create(Self);
        Parent := FPicturePanel;
        with FImageCtrl do
        begin
          Name := 'PaintBox';
          Align := alClient;
          Parent := FPaintPanel;
          Proportional := True;
          Stretch := True;
          Center := True;
          IncrementalDisplay := True;
        end;
      end;
    end;
end;

procedure TOpenPictureDialogM3D.DoSelectionChange;
var FullName: string;
    ValidPicture: Boolean;
function ValidFile(const FileName: string): Boolean;
begin
    Result := GetFileAttributes(PChar(FileName)) <> $FFFFFFFF;
end;
begin
    FullName := FileName;
    if FullName <> FSavedFilename then
    begin
      FSavedFilename := FullName;
      ValidPicture := FileExists(FullName) and ValidFile(FullName);
      if ValidPicture then
      try
        FImageCtrl.Picture.LoadFromFile(FullName);   //here load m3i m3c in bmp

        TM3IGraphic(FImageCtrl.Picture).GetOriginalSize(FullName, OrigFileSize);

        FPaintPanel.Caption := '';
        FPictureLabel.Caption := 'Size: ' + IntToStr(OrigFileSize.X) + 'x' +
                                            IntToStr(OrigFileSize.Y);
      except
        ValidPicture := False;
      end;
      if not ValidPicture then
      begin
        FPictureLabel.Caption := '';//SPictureLabel;
        FImageCtrl.Picture := nil;
        FPaintPanel.Caption := '';//No preview';
      end;
    end;
    inherited DoSelectionChange;
end;

procedure TOpenPictureDialogM3D.DoClose;
begin
    inherited DoClose;
 //   Application.HideHint;
end;

procedure TOpenPictureDialogM3D.DoShow;
var PreviewRect, StaticRect: TRect;
begin
    { Set preview area to entire dialog }
    GetClientRect(Handle, PreviewRect);
    StaticRect := GetStaticRect;
    { Move preview area to right of static area }
    PreviewRect.Left := StaticRect.Left + (StaticRect.Right - StaticRect.Left);
    Inc(PreviewRect.Top, 4);
    FPicturePanel.BoundsRect := PreviewRect;
    FImageCtrl.Picture := nil;
    FSavedFilename := '';
    FPaintPanel.Caption := '';//srNone;
    FPicturePanel.ParentWindow := Handle;
    inherited DoShow;
end;

function TOpenPictureDialogM3D.Execute(ParentWnd: HWND): Boolean;
begin
    if NewStyleControls and not (ofOldStyleDialog in Options) then
      Template := 'DLGTEMPLATEM3D' else Template := nil;
    Result := inherited Execute(ParentWnd);
end;

function TOpenPictureDialogM3D.IsFilterStored: Boolean;
begin
    Result := not (Filter = GraphicFilter(TGraphic));
end;

procedure TM3IGraphic.GetOriginalSize(const Filename: String; var ISize: TPoint);
var FileStream: TFileStream;
begin
    if not FileExists(Filename) then
    begin
      ISize := Point(0, 0);
      Exit;
    end;
    FileStream := TFileStream.Create(Filename, fmOpenRead);
    FileStream.Seek(4, soBeginning);
    FileStream.Read(ISize.X, 4);
    FileStream.Read(ISize.Y, 4);
    FileStream.Free;
end;

procedure TM3IGraphic.LoadFromFile(const Filename: String);
var FileStream: TFileStream;
begin
    if not FileExists(Filename) then Exit;
    FileStream := TFileStream.Create(Filename, fmOpenRead);      {[fsmRead]}
    LoadFromStream(FileStream);
    FileStream.Free;
end;

procedure TM3IGraphic.LoadFromStream(Stream: TStream);    //only if preview image is contained?
var {SL5: TsiLight5;
    dx, dy, d: Double;
    nx, ny, xx, yy, SLsize, LineSize, MID, TopAdr, YAdr, Dfunc: Integer;
    pc, pcin: PCardinal;
    SVcol: TSVec;
    sdv: TLightSD;
    PLV: TPaintLightVals;
    aspect, sFOV, wid1d: Single;
    SPosX, SPosY, SPosXadd, SPosYadd, SPosYstart: TSVec;
    PaintVGrads: TMatrix3; }
    MID, Wid, Hei, iAdr, nx, ny, LineSize, xx, yy, YAdr: Integer;   // MandId, Width, Height
    dx, dy: Double;
    pc: PCardinal;
 //   buf: array of Cardinal;
label lab1;
begin
    try
      if PixelFormat <> pf32bit then PixelFormat := pf32bit;
      Stream.Seek(0, soBeginning);
      Stream.Read(MID, 4);
      if MID < 20 then goto lab1;
      Stream.Read(Wid, 4);
      Stream.Read(Hei, 4);
      if (Wid < 4) or (Hei < 4) or (Wid > 65000) or (Hei > 65000) then goto lab1;
      if Wid > Hei * 1.4 then SetSize(400, (Hei * 400) div Wid) //  152
                         else SetSize((Wid * 400) div Hei, 400);//  210
      LineSize := Wid * 4;
    //  SetLength(buf, Wid);
      dx := (Wid - 1) / (Width - 1);
      dy := (Hei - 1) / (Height - 1);

      iAdr := SizeOf(TMandHeader10) + Wid * Hei * SizeOf(TsiLight5) + SizeOf(THeaderCustomAddon);
      if Stream.Size < iAdr + LineSize * Hei then goto lab1;

      Stream.Seek(iAdr, soBeginning);
      for ny := 0 to Height - 1 do
      begin
        pc := ScanLine[ny];
        yy := Round(ny * dy);
        YAdr := yy * LineSize + iAdr;
        for nx := 0 to Width - 1 do
        begin
          xx := Round(nx * dx);
          Stream.Seek(YAdr + xx * 4, soBeginning);
          Stream.Read(pc^, 4);
          Inc(pc);
        end;
      end;
      Modified := true;
      Exit;
lab1: //SetSize(1, 1);
  //    Free;
      Assign(NoPreviewBMP);
   //   Modified := true;
    except
      raise Exception.Create('Unable to open M3I file');
    end;



end;

procedure TM3CGraphic.GetOriginalSize(const Filename: String; var ISize: TPoint);
var FileStream: TFileStream;
begin
    if not FileExists(Filename) then
    begin
      ISize := Point(0, 0);
      Exit;
    end;
    FileStream := TFileStream.Create(Filename, fmOpenRead);
    FileStream.Seek(4, soBeginning);
    FileStream.Read(ISize.X, 4);
    FileStream.Read(ISize.Y, 4);
    FileStream.Free;
end;

procedure TM3CGraphic.LoadFromStream(Stream: TStream);
var MID, Wid, Hei, iAdr, nx, ny, LineSize, xx, yy, YAdr: Integer;
    dx, dy, pSContrast: Double;
    pc: PCardinal;
    sMC: TMCrecord;
 //   buf: array of Cardinal;
    sv1: TSVec;
    MCcontrast: Byte;
label lab1;
begin
    try
      if PixelFormat <> pf32bit then PixelFormat := pf32bit;
      Stream.Seek(0, soBeginning);
      Stream.Read(MID, 4);
      if MID < 20 then goto lab1;
      Stream.Read(Wid, 4);
      Stream.Read(Hei, 4);
      if (Wid < 4) or (Hei < 4) or (Wid > 65000) or (Hei > 65000) then goto lab1;
      if Wid > Hei * 1.4 then SetSize(400, (Hei * 400) div Wid)
                         else SetSize((Wid * 400) div Hei, 400);
      Stream.Seek(423 {Off(TMandHeader10.MCcontrast)}, soBeginning);
      Stream.Read(MCcontrast, 1);
      pSContrast := (Sqr(MCcontrast + 128) * 2.25 / 65536 + 1.75) * 0.25;
      LineSize := Wid * SizeOf(TMCrecord);
    //  SetLength(buf, Wid);
      dx := (Wid - 1) / (Width - 1);
      dy := (Hei - 1) / (Height - 1);
      iAdr := SizeOf(TMandHeader10) + SizeOf(THeaderCustomAddon);
      if Stream.Size < iAdr + LineSize * Hei then goto lab1;
//BlockWrite(f, siLightMC[0], SizeOf(TMCrecord) * Length(siLightMC));
 //     Stream.Seek(iAdr, soBeginning);
      for ny := 0 to Height - 1 do
      begin
        pc := ScanLine[ny];
        yy := Round(ny * dy);
        YAdr := yy * LineSize + iAdr;
        for nx := 0 to Width - 1 do
        begin
          xx := Round(nx * dx);
          Stream.Seek(YAdr + xx * SizeOf(TMCrecord), soBeginning);
          Stream.Read(sMC, SizeOf(TMCrecord));
          if sMC.RayCount > 0 then
          begin
            sv1[0] := MCRGBtoDouble(@sMC.Red) * pSContrast;
            sv1[1] := MCRGBtoDouble(@sMC.Green) * pSContrast;
            sv1[2] := MCRGBtoDouble(@sMC.Blue) * pSContrast;
            sv1 := mMinMaxSVec(0, 1, sv1);
            pc^ := (Round(sv1[0] * 255) shl 16) or (Round(sv1[1] * 255) shl 8) or Round(sv1[2] * 255);
          end;
          Inc(pc);
        end;
      end;
      Modified := true;
      Exit;
lab1:// SetSize(1, 1);  // with 0,0 the image is not updated in dialog
      Assign(NoPreviewBMP);
    except
      raise Exception.Create('Unable to open M3C file');
    end;
end;

procedure TM3CGraphic.LoadFromFile(const Filename: String);
var FileStream: TFileStream;
begin
    if not FileExists(Filename) then exit;
    FileStream := TFileStream.Create(Filename, fmOpenRead);      {[fsmRead]}
    LoadFromStream(FileStream);
    FileStream.Free;
end;




initialization
  TPicture.RegisterFileFormat('M3I', '', TM3IGraphic);
  TPicture.RegisterFileFormat('M3C', '', TM3CGraphic);
  NoPreviewBMP := TBitMap.Create;
  NoPreviewBMP.PixelFormat := pf32bit;
  NoPreviewBMP.SetSize(400, 400); // 153, 80
  NoPreviewBMP.Canvas.FillRect(NoPreviewBMP.Canvas.ClipRect);
  NoPreviewBMP.Canvas.Font.Height := 24; // 20
  NoPreviewBMP.Canvas.TextOut(38, 29, 'no preview');
finalization
  TPicture.UnregisterGraphicClass(TM3IGraphic);
  TPicture.UnregisterGraphicClass(TM3CGraphic);
  NoPreviewBMP.Free;


end.


