procedure SomeProcedure;

    Header.PCFAddon := @HAddon;
    for xx := 0 to 5 do Header.PHCustomF[xx] := @HybridCustoms[xx];
    if LoadParsFromStream(Header, Stream) then
  //  with Bitmap do
    begin
      PixelFormat := pf32bit;
      if Header.Width > Header.Height * 1.4 then
      begin
        Width  := 152;
        Height := (Header.Height * 152) div Header.Width;
      end else begin
        Height := 210;
        Width  := (Header.Width * 210) div Header.Height;
      end;
      dx := (Header.Width - 1) / (Width - 1);
      dy := (Header.Height - 1) / (Height - 1);
      // Make LightVals + PaintParameter
      MakeLightValsFromHeaderLight(@Header, @LightVals, 1, Header.bStereoMode);
      PaintParameter.ppPaintHeight := Header.Height;
      PaintParameter.ppPaintWidth := Header.Width;
      if Header.bPlanarOptic = 2 then sFOV := Pi else
        sFOV := Header.dFOVy * Pid180;
      Dfunc := Header.Light.TBoptions shr 30; // 2:dfunc=2 1:dfunc=0
      wid1d := 1 / Width;
      CalcStepWidth(@Header);
      PaintVGrads := NormaliseMatrixTo(Header.dStepWidth, @Header.hVGrads);
      PaintParameter.ppWidth  := Header.Width;
      PaintParameter.ppHeight := Header.Height;
      PaintParameter.ppYinc   := 1;
      PaintParameter.PLVals   := @LightVals;
      PaintParameter.pVgrads  := @PaintVGrads;
      PaintParameter.sFOVy    := sFOV;
      PaintParameter.ppXOff   := CalcXoff(@Header);
      CalcPPZvals(Header, PaintParameter.Zcorr, PaintParameter.ZcMul, PaintParameter.ZZstmitDif);
      PaintParameter.StepWidth := Header.dStepWidth;
      PaintParameter.ppPlanarOptic := Header.bPlanarOptic and 3;
      d := MinMaxCD(0.01, sFOv * 0.5, 1.5);
      PaintParameter.ppPlOpticZ := Cos(d) * d / Sin(d);
      if PaintParameter.ppPlanarOptic = 2 then aspect := 2 else
        aspect := width / height;
      GetStartSPosAndAddVecs(PLV, PaintParameter, SPosYstart, SPosYadd, SPosXadd);

      try
        Stream.Seek(0, soBeginning);
        Stream.Read(MID, 4);
        if MID <  4 then Stream.Seek(200, soBeginning) else
        if MID <  7 then Stream.Seek(272, soBeginning) else
        if MID <  8 then Stream.Seek(580, soBeginning) else
        if MID < 20 then Stream.Seek(SizeOf(TMandHeader9), soBeginning)
                    else Stream.Seek(SizeOf(TMandHeader10), soBeginning);
        TopAdr := Stream.Position;
        if MID < 19 then SetLength(SI4, j);
        if MID < 18 then
        begin
          SetLength(SI3, j);
          BlockRead(f, SI3[0], j * SizeOf(TsiLight3));
          PSI3 := @SI3[0];
          PSI4 := @SI4[0];
          for i := 1 to j do
          begin
            PSI4^ := PSI3^;
            Inc(PSI4);
            Inc(PSI3);
            PWord(PSI4)^ := 0;
            PSI4 := PInteger(Integer(PSI4) + 2);
            PSI4^ := PSI3^;
            Inc(PSI4);
            Inc(PSI3);
            PSI4^ := PSI3^;
            Inc(PSI4);
            Inc(PSI3);
            PWord(PSI4)^ := 0;
            PSI4 := PInteger(Integer(PSI4) + 2);
          end;
          SetLength(SI3, 0);
        end
        else if MID < 19 then BlockRead(f, SI4[0], j * SizeOf(TsiLight4));  

        if MID < 18 then SLsize := SizeOf(TsiLight3) else
        if MID < 19 then SLsize := SizeOf(TsiLight4) else
                         SLsize := SizeOf(TsiLight5);
        LineSize := SLsize * Header.Width;

        for ny := 0 to Height - 1 do
        begin
          pc := ScanLine[ny];
          yy := Round(ny * dy);
          YAdr := yy * LineSize + TopAdr;
          SPosY := AddSVecWeight(SPosYstart, SPosYadd, yy);
          PLV.yPos := ny / Height;
          PreCalcDepthCol(Dfunc, @PLV, LightVals.PLValigned);

          for nx := 0 to Width - 1 do
          begin
            xx := Round(nx * dx);

            if PLV.iPlanarOptic = 2 then SPosX := SPosYstart else
              SPosX := AddSVecWeight(SPosY, SPosXadd, xx);
            PLV.xPos := nx * wid1d;
            CalcViewVec(@PLV, aspect);

            Stream.Seek(YAdr + xx * SLsize, soBeginning);
            Stream.Read(SL5, SLsize);
            if SLsize < 18 then     //convert type
            begin


            end;
            CalcObjPos(PLV, PaintParameter, @SL5, @SPosX);
            CalcPixelColorSvec(@SVcol, sdv, @SL5, @LightVals, @PaintParameter);
            pc^ := SVecToCol(SVcol);
            Inc(pc);
          end;
        end;
        if MID > 18 then
          BlockRead(f, GUI.siLight5[0], j * SizeOf(TsiLight5))
        else
          ConvertSiLight4To5(@SI4[0], @GUI.siLight5[0], j);

        if MID < 20 then
        begin
          PW := PWord(Integer(@GUI.siLight5[0]) + 10);  //@shadow
          if Header.bCalculateHardShadow > 0 then
          begin
            for i := 1 to j do
            begin
              PWord(Integer(PW) + 2)^ := PWord(Integer(PW) + 2)^ shr 1;
              PSmallint(Integer(PW) - 6)^ := -PSmallint(Integer(PW) - 6)^;
              if PW^ < 32767 then PW^ := $400 else PW^ := 0;
              Inc(PW, 9);
            end;
          end else begin
            for i := 1 to j do
            begin
              PWord(Integer(PW) + 2)^ := PWord(Integer(PW) + 2)^ shr 1;
              PSmallint(Integer(PW) - 6)^ := -PSmallint(Integer(PW) - 6)^;
              if PWord(Integer(PW) - 2)^ > 32767 then PW^ := 100 else
              PW^ := (32767 - (PW^ and $7FFF)) shr 5;
              Inc(PW, 9);
            end;
          end;
        end;   

      finally
      end;
      Modified := true;

    end
    else raise Exception.Create('Unable to open M3I file');
end.

procedure TM3IGraphic.LoadFromFile(const FileName: String);   //recalc only header downsized...!?
var SL5: TsiLight5;
    dx, dy: Double;
    nx, ny, xx, yy, SLsize, LineSize, MID, TopAdr, YAdr: Integer;
    pc, pcin: PCardinal;
    SVcol: TSVec;
    sdv: TLightSD;
    f: file;
begin
    if LoadParameter(Header, FileName, False) then
    begin
      PixelFormat := pf32bit;
      if Header.Width > Header.Height * 1.4 then
      begin
        Width  := 152;
        Height := (Header.Height * 152) div Header.Width;
      end else begin
        Height := 210;
        Width  := (Header.Width * 210) div Header.Height;
      end;
      dx := (Header.Width - 1) / (Width - 1);
      dy := (Header.Height - 1) / (Height - 1);

      // Make LightVals + PaintParameter


      AssignFile(f, FileName);
      Reset(f, 1);
      try
        BlockRead(f, MID, 4);
        if MID <  4 then Seek(f, 200) else
        if MID <  7 then Seek(f, 272) else
        if MID <  8 then Seek(f, 580) else
        if MID < 20 then Seek(f, SizeOf(TMandHeader9))
                    else Seek(f, SizeOf(TMandHeader10));
        TopAdr := FilePos(f);
        if MID < 19 then SetLength(SI4, j);
        if MID < 18 then
        begin
          SetLength(SI3, j);
          BlockRead(f, SI3[0], j * SizeOf(TsiLight3));
          PSI3 := @SI3[0];
          PSI4 := @SI4[0];
          for i := 1 to j do
          begin
            PSI4^ := PSI3^;
            Inc(PSI4);
            Inc(PSI3);
            PWord(PSI4)^ := 0;
            PSI4 := PInteger(Integer(PSI4) + 2);
            PSI4^ := PSI3^;
            Inc(PSI4);
            Inc(PSI3);
            PSI4^ := PSI3^;
            Inc(PSI4);
            Inc(PSI3);
            PWord(PSI4)^ := 0;
            PSI4 := PInteger(Integer(PSI4) + 2);
          end;
          SetLength(SI3, 0);
        end
        else if MID < 19 then BlockRead(f, SI4[0], j * SizeOf(TsiLight4));  
 
        if MID < 18 then SLsize := SizeOf(TsiLight3) else
        if MID < 19 then SLsize := SizeOf(TsiLight4) else
                         SLsize := SizeOf(TsiLight5);
        LineSize := SLsize * Header.Width;

        for ny := 0 to Height - 1 do
        begin
          pc := ScanLine[ny];
          yy := Round(ny * dy);
          YAdr := yy * LineSize + TopAdr;
          for nx := 0 to Width - 1 do
          begin
            xx := Round(nx * dx);
            Seek(f, YAdr + xx * SLsize);
            BlockRead(f, SL5, SLsize);
            if SLsize < 18 then     //convert type
            begin


            end;
            CalcPixelColorSvec(@SVcol, sdv, @SL5, @LightVals, @PaintParameter);
            pc^ := SVecToCol(SVcol);
            Inc(pc);
          end;
        end;
        if MID > 18 then
          BlockRead(f, GUI.siLight5[0], j * SizeOf(TsiLight5))
        else
          ConvertSiLight4To5(@SI4[0], @GUI.siLight5[0], j);

        if MID < 20 then
        begin
          PW := PWord(Integer(@GUI.siLight5[0]) + 10);  //@shadow
          if Header.bCalculateHardShadow > 0 then
          begin
            for i := 1 to j do
            begin
              PWord(Integer(PW) + 2)^ := PWord(Integer(PW) + 2)^ shr 1;
              PSmallint(Integer(PW) - 6)^ := -PSmallint(Integer(PW) - 6)^;
              if PW^ < 32767 then PW^ := $400 else PW^ := 0;
              Inc(PW, 9);
            end;
          end else begin
            for i := 1 to j do
            begin
              PWord(Integer(PW) + 2)^ := PWord(Integer(PW) + 2)^ shr 1;
              PSmallint(Integer(PW) - 6)^ := -PSmallint(Integer(PW) - 6)^;
              if PWord(Integer(PW) - 2)^ > 32767 then PW^ := 100 else
              PW^ := (32767 - (PW^ and $7FFF)) shr 5;
              Inc(PW, 9);
            end;
          end;
        end;  

      finally
        CloseFile(f);
      end;
    //  Modified := true; 

    end
    else raise Exception.Create('Unable to open M3I file');
end;  

procedure ConvertSiLight4To5(PSL4: TPsiLight4; PSL5: TPsiLight5; n: Integer);
var i: Integer;
    SinTab: array[0..32767] of Single;
type tt = array[0..11] of Byte;
     ptt = ^tt;
begin
    for i := 0 to 32767 do SinTab[i] := Sin(i * Pid16384);
    for i := 1 to n do
    begin
      PSL5.NormalX := Round(SinTab[PSL4.LightAngleX and $7FFF] * 32767);
      PSL5.NormalY := Round(SinTab[PSL4.LightAngleY and $7FFF] * 32767);
      PSL5.NormalZ := Round(SinTab[(PSL4.LightAngleX + 8192) and $7FFF] * SinTab[(PSL4.LightAngleY + 8192) and $7FFF] * 32767);
      ptt(@PSL5.RoughZposFine)^ := ptt(@PSL4.RoughZposFine)^;
      Inc(PSL4);
      Inc(PSL5);
    end;
end;  


function SVecToCol(sv: TSVec): Cardinal;
begin
    sv := mMinMaxSVec(0, 1, sv);
    Result := Round(sv[2] * 255) or (Round(sv[1] * 255) shl 8) or (Round(sv[0] * 255) shl 16);
end;

function AddSVecWeight(const SPos, SPosPlus: TSVec; const Step: Integer): TSVec;
asm
    push ecx
    push ebx
    mov  ebx, [ebp + 8]
    mov  [ebp - 4], ecx
    fld  dword [edx]
    fld  dword [edx + 4]
    fld  dword [edx + 8]
    fild dword [ebp - 4]
    fmul st(3), st
    fmul st(2), st
    fmulp
    fadd dword [eax + 8]
    fstp dword [ebx + 8]
    fadd dword [eax + 4]
    fstp dword [ebx + 4]
    fadd dword [eax]
    fstp dword [ebx]
    pop  ebx
    pop  ecx
end;      

procedure TM3IGraphic.LoadFromResourceName(Instance: HInst; const Name: String);
var ResStream: TResourceStream;
begin
    try
      ResStream := TResourceStream.Create(Instance, Name, RT_RCDATA);
    except
      exit;
    end;
    try
      LoadFromStream(ResStream);
    finally
      ResStream.Free;
    end;
end;

procedure TM3IGraphic.LoadFromResourceID(Instance: HInst; ResID: Integer);
begin
    LoadFromResourceName(Instance, String(ResID));
end; 
